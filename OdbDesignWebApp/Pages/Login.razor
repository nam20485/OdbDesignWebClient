@* @page "/login" *@
@using System.ComponentModel.DataAnnotations
@using Odb.Client.Lib.Services
@inject NavigationManager NavigationManager
@inject IAuthenticationService AuthenticationService
@inject IOdbDesignClientService OdbDesignClientService

<div class="col-md-6 offset-md-3 mt-5">
    <div class="alert alert-info">
        Username: @User     
        <br />
        Password: @Pass
        <button class="btn btn-primary" disabled="@(!loggedIn)" onclick="@HandleLogout">
            @if (loading)
            {
                <span class="spinner-border spinner-border-sm mr-1"></span>
            }
            Logout
        </button>
    </div>
    <div class="card">
        <h4 class="card-header">OdbDesign Server API Authentication</h4>
        <div class="card-body">
            <EditForm Model="@model" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <div class="form-group">
                    <label>Username</label>
                    <InputText @bind-Value="model.Username" class="form-control" />
                    <ValidationMessage For="@(() => model.Username)" />
                </div>
                <div class="form-group">
                    <label>Password</label>
                    <InputText @bind-Value="model.Password" type="password" class="form-control" />
                    <ValidationMessage For="@(() => model.Password)" />
                </div>
                <button class="btn btn-primary" disabled="@loggedIn">
                    @if (loading)
                    {
                        <span class="spinner-border spinner-border-sm mr-1"></span>
                    }
                    Login
                </button>
                @if (!string.IsNullOrEmpty(error))
                {
                    <div class="alert alert-danger mt-3 mb-0">@error</div>
                }
            </EditForm>
        </div>
    </div>
</div>

@code {

    private const string RETURN_URL_QUERY_NAME = "returnUrl";

    private Model model = new ();
    private bool loading;
    private string error;

    private bool loggedIn = false;

    private string User { get; set; }
    private string Pass { get; set;  }

    protected async override Task OnInitializedAsync()
    {
        await SetUserAndPass();

        // redirect to home if already logged in
        // if (await AuthenticationService.IsLoggedInAsync())
        // {
        //     NavigationManager.NavigateTo("");
        // }

        loggedIn = await AuthenticationService.IsLoggedInAsync();
    }

    async void HandleLogout()
    {
        loading = true;
        await AuthenticationService.LogoutAsync();
        await SetUserAndPass();
        loading = false;
        StateHasChanged();
    }

    async Task SetUserAndPass()
    {
        User = await AuthenticationService.GetUsernameAsync();
        Pass = await AuthenticationService.GetPasswordAsync();
        loggedIn = await AuthenticationService.IsLoggedInAsync();
    }

    private async void HandleValidSubmit()
    {
        loading = true;
        try
        {
            await AuthenticationService.LoginAsync(model.Username, model.Password);
            await SetUserAndPass();            
            // var queryParams = HttpUtility.ParseQueryString(NavigationManager.ToAbsoluteUri(NavigationManager.Uri).Query);
            // var returnUrl = queryParams[RETURN_URL_QUERY_NAME] ?? "";
            // if (!string.IsNullOrWhiteSpace(returnUrl))
            // {
            //     NavigationManager.NavigateTo(returnUrl);
            // }                      
        }
        catch (Exception ex)
        {
            error = ex.Message;                        
        }     
        
        loading = false;
        StateHasChanged();
    }

    private class Model
    {
        [Required]
        public string Username { get; set; }

        [Required]
        public string Password { get; set; }
    }
}